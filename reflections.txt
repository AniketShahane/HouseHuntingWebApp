### This is a house hunt project that we are creating  ###

STEPS:

-------------------------------------------------------------------------------

1. The first Step is to get everything setup which we already know
-> git initialization, virtual environment setup and django installation

-------------------------------------------------------------------------------

2. What is the best place to store the templates ???
---> Inside the root directory ie. Where your manage.py resides
---> After this we go into settings.py of our project folder and define the path of all the templates
'''
  (inside templates list)
  DIRS: os.path.join(BASE_DIR, 'templates')
'''
*** This simply gives the path of the templates folder.. So whenever me make a render request django searches for that file inside of this templates folder....

-------------------------------------------------------------------------------

3. What is the best place to store the static files ???
---> Inside the main project folder ie. Where wsgi.py resides we create the static folder
---> After this we go into the settings.py of our main project
'''
STATIC_ROOT = os.join.path(BASE_DIR, 'static')
STATICFILES_DIRS = [
  os.join.path(BASE_DIR, 'HouseHunt/static')
]
STATIC_URL = '/static/'
'''
*** The static root just says that create a 'static' named folder in the base/root directory ie. where manage.py resides.
*** The static files just says that look into the 'Project_folder/static' folder for the files when we run '''python manage.py collectstatic'''
*** The static url just defines the url that the user should visit to look at these files
*** Wherever we want to use static files we need to write '''{% load static %}'''
*** To use the static files we need to write '''{% static 'file path inside of static' %}'''

-------------------------------------------------------------------------------

4. Now a good practice is the extend the elements like header and footer to other html files in out project so that we don't have to write the code again and again. But an even cleaner way of doing this is to make partials Eg. storing the code of the header in the folder templates/partials/_header.html
&&& storing the code of the footer in the folder templates/partials/_footer.html
--->
'''
(To include these partials into our base.html we just use this code)

{% include 'partials/_topbar.html' %}
{% include 'partials/_navbar.html' %}
{% include 'partials/_footer.html' %}
'''

-------------------------------------------------------------------------------

5. What does '''python manage.py makemigrations''' do ???
-> This command simply creates the files for the models so that when we further run the '''python manage.py migrate''' it will update the database to have the tables for our models.

-------------------------------------------------------------------------------

6. If we want to change the styling of the admin page of django
--> We first create an 'admin' folder inside the root templates directory and inside that we create a file 'base_site.html'
--> Inside that we have to first extend
'''
{% extends 'admin/base.html' %}
{% load static %}

{% block brading %}
  Change what we see on the top
{% endblock %}

{% block extrastyle %}
  Add links to css files... <link href="{% static 'css/admin.css' %} rel='stylesheet'" >
{% endblock %}
'''
---> To get the styling to appear the admin.css should be added inside the static folder of the main project and not the ***ROOT STATIC*** ie. where the wsgi.py is present.

-------------------------------------------------------------------------------

7. If We want to customize the way the admin page lists all the things in our database we can add things to the admin.py of that app
Eg. (inside the admin.py of the listings)
class ListingAdmin(admin.ModelAdmin):
  list_display = ('id', 'title', 'is_published', 'price', 'realtor')
  #shows the following field when we click on listings
  list_display_links = ('id', 'title')
  #shows the edit page when we click on either id or title before this it was just id b/c it was 1st
  list_filer = ('realtor',)
  #shows a filter which allows us to view the listings by realtor
  list_editable = ('is_published')
  #this will show a checkbox for is_published that doesn't require us to go into the edit page
  search_fields = ('title', 'description', 'address', 'city', 'state', 'price')
  #this allows us to search according to these fields
  list_perpage = 25
  #only shows 25 items on the page and creates the pagination

  def get_ordering(self, request):
    return ['id']
  #This sorts the entries in the ascending order wrt the id

-------------------------------------------------------------------------------

8. How to fetch the objects inside of our database ??
--> (inside of the views.py of the listings where we render the html page on request)
'''
from .models import Listing
(inside of the listings function)
listings = Listing.objects.all()
return render(request, 'listings/listings.html', {'listings':listings})
'''
---> To use these objects just loop through them

-------------------------------------------------------------------------------

9. We can also use django humanize (provides a whole lot of things)
-> To use this we just need to add 'django.contrib.humanize' to the installed apps section of settings
-> To use the functions inside of humanize we just need to load the humanize into the html of our site
-> {% load humanize %}
(to use this finally we just need a " | function_name")
Eg. 580000 | intcomma => 580,000
(COOL AF)

-------------------------------------------------------------------------------

10. We also need the paginator on the listings page to work. For this we use django paginator
-> To use the paginator we need to add the following code to the index function of listings' views.py
'''
def index(request):
    listings = Listing.objects.order_by('-list_date').filter(is_published=True)
    #Instead of all() we use 'order_by' to order the listings and filter so that only the ones that are published are viewed

    paginator = Paginator(listings, 6)
    #defines that there will be only 6 listings on every page
    page = request.GET.get('page')
    #gets the page object
    paged_listings = paginator.get_page(page)
    #gets the pages for the paginator so that we can view 6 listings on every page
    return render(request, 'listings/listings.html', {
    'listings': paged_listings
    })
'''
Q. But how do we implement this paginator into our HTML code ???
-->
'''
<div class="row">
  <div class="col-md-12">
    {% if listings.has_other_pages %}
    <ul class="pagination">
      {% if listings.has_previous %}
      <li class="page-item">
        <a href="?page={{listings.previous_page_number}}" class="page-link">&laquo;</a>
      </li>
      {% else %}
      <li class="page-item disabled">
        <a class="page-link">&laquo;</a>
      </li>
      {% endif %}
      {% for i in listings.paginator.page_range %}
      {% if listings.number == i %}
      <li class="page-item active">
        <a class="page-link">{{i}}</a>
      </li>
      {% else %}
      <li class="page-item">
        <a href="?page={{i}}" class="page-link">{{i}}</a>
      </li>
      {% endif %}
      {% endfor %}
      {% if listings.has_next %}
      <li class="page-item">
        <a href="?page={{listings.next_page_number}}" class="page-link">&raquo;</a>
      </li>
      {% else %}
      <li class="page-item disabled">
        <a class="page-link">&raquo;</a>
      </li>
      {% endif %}
    </ul>
    {% endif %}
  </div>
</div>

'''

-------------------------------------------------------------------------------

11. Now how do we get specific listings from the listings page and show them on our listing.html
->> Simple we go to the view.py of the listings folder and add the following code to the listing func
'''
(first import get_object_or_404 and the Listing model)

listing = get_object_or_404(Listing, pk=listing_id)
(just return this as a dictonary)

'''

-------------------------------------------------------------------------------

12. For our search to work, we need to filter our list of objects according to the input that is given by the user through the form that is present in our search.html
-> (inside the views.py of the listings, we need to add something to our search function)
'''
queryList = Listing.objects.order_by('-list_date')
#this just gets all the objects of the Listing model
#Now to filter this we need to check the values for the **names** of the inputs

#keywords
if 'keywords' in request.GET:
  #if we submit our form after entering something in the keywords input the condition will be true
  keywords = request.GET['keywords']
  #this variable will store the value that we entered for our keywords input
  if keywords:
  #if there is something inside the keywords variable the condition will be true
    queryList = queryList.filter(description__icontains=keywords)
    #this will filter only if description of the property contains the keywords (i=>case insensitive)

#city
if 'city' in request.GET:
  city = request.GET['city']
  if city:
    queryList = queryList.filter(city__iexact=city)
    #this will only filter if the city name matches (iexact=>exact letters but case insensitive)

#state
if 'state' in request.GET:
  state = request.GET['state']
  if state:
    queryList = queryList.filter(state__iexact=state)

#bedrooms
if 'bedrooms' in request.GET:
  bedrooms = request.GET['bedrooms']
  if bedrooms:
    queryList = queryList.filter(bedrooms__lte=bedrooms)
    #the lte in this case is less than equal to

#price
if 'price' in request.GET:
  price = request.GET['price']
  if price:
    queryList = queryList.filter(price__lte=price)

(finally when we return the render we also need to add the request.GET so that when we submit the form the values will still stay in their fields)
return render(request, 'listings/search.html', {
...
...
...
'values':request.GET
})
'''
--> The values that we returned in the previous case can then be used to set the values of the fields
Eg. <input value="{{values.city}}"> --- This will set the value of the city field to city
<option ... {% if state == values.state %} selected {% endif %}> --- Since we are dealing with select tag s

-------------------------------------------------------------------------------

13.The Accounts and authentication
          *** Simple Steps ***
      1. First create the accounts app and then create the necessary urls
      '''
      urlpatterns = [
          path('login', views.login, name='login'),
          path('logout', views.logout, name='logout'),
          path('register', views.register, name='register'),
          path('dashboard', views.dashboard, name='dashboard'),
      ]
      '''
      2. (inside of the views.py of accounts define the function in the following way)
      '''
      from django.shortcuts import render, redirect
      from django.contrib import messages
      from django.contrib.auth.models import User
      from django.contrib.auth import authenticate
      from django.contrib import auth

      def register(request):
          if request.method == 'POST':
          #checking to see if the user has made a post request or not
              #getting the user details
              first_name = request.POST['first_name']
              last_name = request.POST['last_name']
              username = request.POST['username']
              email = request.POST['email']
              password = request.POST['password']
              password2 = request.POST['password2']
              if(password == password2):
                  #if passwords match
                  if User.objects.filter(username=username).exists():
                      #if username is already present in our database
                      messages.error(request, 'Username is already taken')
                      return redirect('register')
                  else:
                      if User.objects.filter(email=email).exists():
                          #if email is already present in our database
                          messages.error(request, 'Email is already in use')
                          return redirect('register')
                      else:
                          #if everything is good we create the user in our database
                          user = User.objects.create_user(username=username, password=password, email=email, first_name=first_name, last_name=last_name)
                          user.save();
                          #very important to save the user in the database
                          messages.success(request, 'You are now registered')
                          return redirect('login')
              else:
                  messages.error(request, 'Passwords Don\'t Match')
                  return redirect('register')
          else:
          #if the user has made a get request
              return render(request, 'accounts/register.html')

          def login(request):
              if request.method == 'POST':
                  username = request.POST['username']
                  password = request.POST['password']
                  user = auth.authenticate(username=username, password=password)
                  if user is not None:
                      auth.login(request, user)
                      messages.success(request, 'You are now logged in')
                      return redirect('dashboard')
                  else:
                      messages.error(request, 'Invalid Credentials')
                      return redirect('login')
              else:
                  return render(request, 'accounts/login.html')


          def logout(request):
              if request.method == 'POST':
                  auth.logout(request)
                  messages.success(request, 'You are logged out!')
                  return redirect('index')
      '''
      3. To actually make a request for logging out we need to make a dummy form with the method of post. ***To check if the user is still logged in we can use '''{% if user.is_authenticated %}'''
      '''
          <li class="nav-item mr-3">
            <a href="javascript:{document.getElementById('logout').submit()}" class="nav-link">
              <i class="fas fa-sign-out-alt"></i> Logout
            </a>
          </li>
          <form action="{% url 'logout' %}" id="logout" method="POST">
            {% csrf_token %} (To prevent cross site forgery)
            <input type="hidden">
          </form>
      '''
    4. To use dynamic page titles we can just use {% block title %} {% endblock %} inside of our title in the base.html

    5. **** To get the alert messages what we have done is
    --> We added the following code to the settings.py of main project. This is because django already supports the messages (django.contrib.messages)
    '''

    from django.contrib.messages import constants as messages
    MESSAGE_TAGS = {
        messages.ERROR: 'danger',
    }

    '''
    --> We created a partial '_alerts.html'
      '''
      {% if messages %}
      {% for message in messages %}
      <div class="contianer" id="message">
        <div class="alert alert-{{message.tags}} alert-dismissable text-center" role="alert">
          <button class="close" type="button" data-dismiss="alert"><span aria-hidden="true"> &times;</span></button>
          <strong>
            {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}
            Error:
            {% else %}
            {{ message.tags|title }}
            {% endif %}
          </strong>
          {{message}}
        </div>
      </div>
      {% endfor %}
      {% endif %}

      '''
      --> To show an error we first have to create the error message
      '''
      # this will send a message to all the html files that have this code
      ({% include 'partials/_alerts.html' %})
      messages.error(request, 'Invalid Credentials')
      '''

-------------------------------------------------------------------------------

14. To send an email in django (Very cool) we just have to add the following lines in the settings.py
'''
#Email Configuration
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'see.you.travels.00@gmail.com'
EMAIL_HOST_PASSWORD = 'seeyou@321'
EMAIL_USE_TLS = True
'''
--> Now to send the email we need to go into the views.py of the contacts and then just add the following lines
'''
from django.core.mail import send_mail
send_mail(
'subject',
'body',
'email from which we will be sending the mail',
'[emailReceiver1, emailReceiver2...]'
fail_silently=False
)
'''
-------------------------------------------------------------------------------
